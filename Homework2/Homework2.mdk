Title         : Homework 2
Title Note    : Due on Oct 5 Wednesday
Author        : Nick Johnson
Email         : nj41@iu.edu
Doc class     : [11pt]article

~ MathDefs
\newcommand{\jacobi}[2]{\ensuremath{\left(\frac{#1}{#2}\right)}}
~


[TITLE]

# What are the types of the following values?
```haskell
a. [’a’,’b’,’c’] :: [char, char, char]

b. (’a’,’b’,’c’) :: (char, char, char)

c. [(False,’0’),(True,’1’)] :: [(Bool, char)]

d. ([False,True],[’0’,’1’]) :: ([Bool, Char])

e. [tail,init,reverse] :: [[a] -> [a]]
```


# What are the types of the following functions?
```haskell
a. second xs = head (tail xs)
second :: [a] -> a

b. swap (x,y) = (y,x) 
swap :: (t1, t) -> (t, t1)

c. pair x y = (x,y) 
pair :: t -> t1 -> (t, t1)

d. double x = x*2 
double:: Int -> Int

e. palindrome xs = reverse xs == xs
palindrome :: Eq a => [a] -> Bool

f. twice f x = f (f x)
twice:: (t -> t) -> t -> t
```

# Types and Typeclasses

a. What functions define the typeclasses `Real` and `Integral`,
respectively? Read the documentation (find them either
through [Hayoo](http://hayoo.fh-wedel.de)
or [Hoogle](https://www.haskell.org/hoogle/)) of these functions and try
invoking each of them in `ghci`. Show your trials and explain in English
what the functions do.\

 i. toRational defines typeclass 'Real'
    - Invocation:
        - ```haskell
        toRational :: a -> Rational
        Prelude> toRational 55/4
        Prelude> 55 % 4
          ```
 - Integral defined by: quot, rem, div, mod, quotRem, divMod, toInteger
    - Invocations:
      - ```haskell
      quot preforms integer division and discards the remainder
      quot :: a -> a -> a
      Prelude> 33 quot 12
      Prelude> 2
        ```
      - ```haskell
      rem returns the remainder of the integer division preformed on the two input numbers
       rem :: a -> a -> a
       Prelude> 3 rem 12
       Prelude> 3
        ``` 
      - ``` haskell
      div returns how many times the first number can be divided by the second number
      div :: a -> a -> a
      Prelude> 6 div 2
      Prelude> 3
        ```
      - ``` haskell
      mod preforms division on two integers and returns the remainder
      mod :: a -> a -> a
      Prelude> 33 mod -12
      Prelude> -3
        ```
      - ``` haskell
       quotRem returns a tuple in the form (result of division, remainder)
       quotRem :: a -> Rational
       Prelude> quotRem 22 8
       Prelude> (2,6)
      ```
- What are the example types that are instances of `Real` and `Integral`,
  respectively. Try invoking the `Real` and `Integral` functions on
  values of the example types that you give.
  
  - Integer and Int types
  
- Define a function `f` as follows:
``` haskell
f x = toRational $ rem x 5 
```
  i. What is `f`'s type? \
``` haskell
  f :: Integral a => a -> Rational
```
   
  - Describe how would your Haskell compiler/interpreter infer `f`'s type.\
    - The compiler understands that 'a' must be of the Real typeclass in order to preform the 'toRational' function and it also knows all predefined functions from the ghci library
\

# Functions

a. Redefine the following version of (&&) using _conditionals_ rather than patterns:
``` haskell
  True && b = b
  False && _    = False
```

- Give three possible definitions for the logical or operator (`||`)
   using pattern matching.
``` haskell
   True || False = True
   True || True = True
   False || False = False
```

- What does the `init` function in Prelude[^prelude] do? Define `init` in
  terms of functions `length` and `take`. \
  
  1)Init takes a list as an input and returns all elements of the list except for the last element.
  
  2)Init takes a list of length x and preforms the 'take' function on elements 0:'length'(x-1)
  
  

[^prelude]: Prelude is a standard module loaded by default when you start `ghci`. Information about Prelude can be found on the [Prelude Hackage page](https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html).

# List Comprehension

a. A positive integer is _perfect_ if it equals the sum of all of its
factors, excluding the number itself. Using a list comprehension, define
a function
``` haskell
  perfects :: Int -> [Int]
  perfects n = undefined
```
that returns the list of all perfect numbers up to a given limit, such that, e.g.:
``` {padding-left:1ex; padding-right:1ex; padding-top:.75ex; padding-bottom:.25ex; background-color:black; color:white; font-size:14pt }
Prelude λ> perfects 500
[6,28,496]
```

- The _scalar product_ of two lists of integers `xs` and `ys` of length `n` is
  give by the sum of the products of the corresponding integers:
  ~ Equation
    \sum_{i=0}^{n-1} (xs_i * ys_i)
  ~
  Using a list comprehension, define a function that returns the scalar
  product of two lists. (*Hint: You could start from the following program stub.*)
  ``` Haskell
    scalarProduct :: [Int] -> [Int] -> Int
    scalarProduct xs ys = undefined
  ```
